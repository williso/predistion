import streamlit as st
import pandas as pd

# -------------------------
# 1. Load v√† x·ª≠ l√Ω d·ªØ li·ªáu
# -------------------------
@st.cache_data
def load_data():
    df = pd.read_csv("Merged_ASIN_Data.csv")
    df = df[[
        'ASIN', 'Niche', 'Product Type', 'Layout ( Text and Image)', 'Number of Colors', 'Trend Quote',
        'Recipient/Sender in the Message', 'Color', 'Message Content', 'Style Design',
        'Tone Design', 'Motif Design', '7 Day Conversion Rate'
    ]].dropna()
    df['7 Day Conversion Rate'] = pd.to_numeric(df['7 Day Conversion Rate'], errors='coerce')
    df.dropna(subset=['7 Day Conversion Rate'], inplace=True)
    return df

# ------------------------
# 2. Giao di·ªán Streamlit
# ------------------------
st.title("üìä T·ªïng h·ª£p t·ªï h·ª£p thi·∫øt k·∫ø theo ASIN v√† CR")

df = load_data()

# ---------------------------------------
# 3. Ch·ªçn Niche v√† Product Type ph√π h·ª£p
# ---------------------------------------
selected_niche = st.selectbox("üîç Ch·ªçn Niche", sorted(df['Niche'].unique()))
filtered_product_types = df[df['Niche'] == selected_niche]['Product Type'].unique()
selected_product_type = st.selectbox("üì¶ Ch·ªçn Product Type", sorted(filtered_product_types))

# L·ªçc theo Niche v√† Product Type
filtered_df = df[(df['Niche'] == selected_niche) & (df['Product Type'] == selected_product_type)]

# ------------------------------------------
# 4. T·ªïng h·ª£p t·ªï h·ª£p thi·∫øt k·∫ø
# ------------------------------------------
group_cols = [
    'Layout ( Text and Image)', 'Number of Colors', 'Trend Quote',
    'Recipient/Sender in the Message', 'Color', 'Message Content',
    'Style Design', 'Tone Design', 'Motif Design'
]

summary_df = (
    filtered_df
    .groupby(group_cols)
    .agg(
        Avg_CR=('7 Day Conversion Rate', 'mean'),
        Count=('ASIN', 'count')
    )
    .reset_index()
    .sort_values(by='Avg_CR', ascending=False)
)

# Hi·ªÉn th·ªã b·∫£ng t·ªïng h·ª£p t·ªï h·ª£p
st.subheader("üìà T·ªïng h·ª£p t·∫•t c·∫£ t·ªï h·ª£p thi·∫øt k·∫ø")
selected_row = st.dataframe(summary_df, use_container_width=True, hide_index=True)

# ------------------------------------------
# 5. L·ªçc v√† hi·ªÉn th·ªã ASIN theo t·ªï h·ª£p ch·ªçn
# ------------------------------------------
# Cho ph√©p ch·ªçn t·ªï h·ª£p t·ª´ b·∫£ng b·∫±ng dropdown
with st.expander("üìå Xem danh s√°ch ASIN theo t·ªï h·ª£p thi·∫øt k·∫ø"):
    st.markdown("### üß© Ch·ªçn m·ªôt t·ªï h·ª£p:")

    # T·∫°o tuple ƒë·ªãnh danh t·ªï h·ª£p
    summary_df["T·ªï h·ª£p"] = summary_df[group_cols].astype(str).agg(" | ".join, axis=1)
    option = st.selectbox("Ch·ªçn t·ªï h·ª£p thi·∫øt k·∫ø:", summary_df["T·ªï h·ª£p"].tolist())

    # L·∫•y ƒë√∫ng d√≤ng t·ªï h·ª£p ƒë∆∞·ª£c ch·ªçn
    selected_combo_row = summary_df[summary_df["T·ªï h·ª£p"] == option].iloc[0]

    # T·∫°o ƒëi·ªÅu ki·ªán l·ªçc t∆∞∆°ng ·ª©ng
    condition = True
    for col in group_cols:
        condition &= (filtered_df[col] == selected_combo_row[col])

    asin_df = filtered_df[condition].sort_values(by='7 Day Conversion Rate', ascending=False)

    # Hi·ªÉn th·ªã danh s√°ch ASIN
    st.markdown("### üìã Danh s√°ch ASIN trong t·ªï h·ª£p ƒë√£ ch·ªçn")
    st.dataframe(asin_df[['ASIN', '7 Day Conversion Rate']], use_container_width=True)
