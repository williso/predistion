import streamlit as st
import pandas as pd

# -------------------------
# 1. Load v√† x·ª≠ l√Ω d·ªØ li·ªáu
# -------------------------
@st.cache_data
def load_data():
    df = pd.read_csv("Merged_ASIN_Data.csv")
    df = df[[
        'ASIN', 'Niche', 'Product Type', 'Layout ( Text and Image)', 'Number of Colors', 'Trend Quote',
        'Recipient/Sender in the Message', 'Color', 'Message Content', 'Style Design',
        'Tone Design', 'Motif Design', '7 Day Conversion Rate'
    ]].dropna()
    df['7 Day Conversion Rate'] = pd.to_numeric(df['7 Day Conversion Rate'], errors='coerce')
    df.dropna(subset=['7 Day Conversion Rate'], inplace=True)
    return df

# ------------------------
# 2. Giao di·ªán Streamlit
# ------------------------
st.title("üìä T·ªïng h·ª£p t·ªï h·ª£p thi·∫øt k·∫ø theo ASIN v√† CR")

df = load_data()

# ---------------------------------------
# 3. Ch·ªçn Niche v√† Product Type ph√π h·ª£p
# ---------------------------------------
selected_niche = st.selectbox("üîç Ch·ªçn Niche", sorted(df['Niche'].unique()))
filtered_product_types = df[df['Niche'] == selected_niche]['Product Type'].unique()
selected_product_type = st.selectbox("üì¶ Ch·ªçn Product Type", sorted(filtered_product_types))

# L·ªçc theo Niche v√† Product Type
filtered_df = df[(df['Niche'] == selected_niche) & (df['Product Type'] == selected_product_type)]

# ------------------------------------------
# 4. T·ªïng h·ª£p t·ªï h·ª£p thi·∫øt k·∫ø
# ------------------------------------------
group_cols = [
    'Layout ( Text and Image)', 'Number of Colors', 'Trend Quote',
    'Recipient/Sender in the Message', 'Color', 'Message Content',
    'Style Design', 'Tone Design', 'Motif Design'
]

summary_df = (
    filtered_df
    .groupby(group_cols)
    .agg(
        Avg_CR=('7 Day Conversion Rate', 'mean'),
        Count=('ASIN', 'count')
    )
    .reset_index()
    .sort_values(by='Avg_CR', ascending=False)
)

# Hi·ªÉn th·ªã b·∫£ng t·ªïng h·ª£p t·ªï h·ª£p
st.subheader("üìà T·ªïng h·ª£p t·∫•t c·∫£ t·ªï h·ª£p thi·∫øt k·∫ø")
st.dataframe(summary_df, use_container_width=True, hide_index=True)

# ------------------------------------------
# 5. Chia ASIN theo nh√≥m CR
# ------------------------------------------
with st.expander("üìå Xem ph√¢n lo·∫°i ASIN theo nh√≥m CR trong t·ªï h·ª£p ƒë√£ ch·ªçn"):
    st.markdown("### üß© Ch·ªçn m·ªôt t·ªï h·ª£p:")

    # T·∫°o chu·ªói m√¥ t·∫£ t·ªï h·ª£p
    summary_df["T·ªï h·ª£p"] = summary_df[group_cols].astype(str).agg(" | ".join, axis=1)
    option = st.selectbox("Ch·ªçn t·ªï h·ª£p thi·∫øt k·∫ø:", summary_df["T·ªï h·ª£p"].tolist())

    # L·∫•y d√≤ng t∆∞∆°ng ·ª©ng
    selected_combo_row = summary_df[summary_df["T·ªï h·ª£p"] == option].iloc[0]

    # L·ªçc ASIN thu·ªôc t·ªï h·ª£p ƒë√≥
    condition = True
    for col in group_cols:
        condition &= (filtered_df[col] == selected_combo_row[col])
    asin_df = filtered_df[condition].copy()

    # T√≠nh ph√¢n v·ªã cho CR
    q33 = asin_df['7 Day Conversion Rate'].quantile(0.33)
    q66 = asin_df['7 Day Conversion Rate'].quantile(0.66)

    # Ph√¢n nh√≥m
    asin_df['CR Group'] = pd.cut(
        asin_df['7 Day Conversion Rate'],
        bins=[-float('inf'), q33, q66, float('inf')],
        labels=['D∆∞·ªõi trung b√¨nh', 'Trung b√¨nh', 'Top']
    )

    # Hi·ªÉn th·ªã t·ª´ng nh√≥m
    st.markdown("#### üü¢ Nh√≥m Top")
    st.dataframe(asin_df[asin_df['CR Group'] == 'Top'][['ASIN']], use_container_width=True, hide_index=True)

    st.markdown("#### üü° Nh√≥m Trung b√¨nh")
    st.dataframe(asin_df[asin_df['CR Group'] == 'Trung b√¨nh'][['ASIN']], use_container_width=True, hide_index=True)

    st.markdown("#### üî¥ Nh√≥m D∆∞·ªõi trung b√¨nh")
    st.dataframe(asin_df[asin_df['CR Group'] == 'D∆∞·ªõi trung b√¨nh'][['ASIN']], use_container_width=True, hide_index=True)
